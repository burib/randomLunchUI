AWSTemplateFormatVersion: "2010-09-09"
Description: Account Level resources stack.
Parameters:
  TopDomainName:
    Type: String
  DomainName:
    Type: String
    Description: |-
      Top level domain where you want your certificate to be issued.
       For example: example.com
  AccountName:
    Type: 'String'
    Description: 'Name of the account where the template is deployed to.'
  ApplicationName:
    Type: "String"
    Description: "Name of the application"
    #TODO: add validation. ( lowercase alphabets only )
Conditions:
  IsProduction:
    Fn::Equals: [ !Ref 'AccountName', 'randomlunch' ]
  NotProduction:
    Fn::Not:
      - Fn::Equals: [ !Ref 'AccountName', 'randomlunch' ]
Resources:
  DomainCertificateDev:
    Type: 'AWS::CertificateManager::Certificate'
    Condition: 'NotProduction'
    Properties:
      DomainName: !Sub "dev.${DomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "dev.${DomainName}"
          ValidationDomain: !Sub "${TopDomainName}"
  DomainCertificateDevWildcard:
    Type: 'AWS::CertificateManager::Certificate'
    Condition: 'NotProduction'
    Properties:
      DomainName: !Sub "*.dev.${DomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "*.dev.${DomainName}"
          ValidationDomain: !Sub "${TopDomainName}"
  DomainCertificateProd:
    Type: 'AWS::CertificateManager::Certificate'
    Condition: 'IsProduction'
    Properties:
      DomainName: !Sub "${DomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "${DomainName}"
          ValidationDomain: !Sub "${TopDomainName}"
  DomainCertificateProdWildcard:
    Type: 'AWS::CertificateManager::Certificate'
    Condition: 'IsProduction'
    Properties:
      DomainName: !Sub "*.${DomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "*.${DomainName}"
          ValidationDomain: !Sub "${TopDomainName}"
  HostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Sub "${DomainName}"

Outputs:
  # The different arn-s that you'll have to provide for your CloudFront distribution to make it secure.
  DomainCertificateDevArn:
    Value: !Ref DomainCertificateDev
    Condition: 'NotProduction'
  DomainCertificateDevWildcardArn:
    Value: !Ref DomainCertificateDevWildcard
    Condition: 'NotProduction'
  DomainCertificateProdArn:
    Value: !Ref DomainCertificateProd
    Condition: 'IsProduction'
  DomainCertificateProdWildcardArn:
    Value: !Ref DomainCertificateProdWildcard
    Condition: 'IsProduction'
  HostedZoneNameServers:
    Value: !Join [ '#', !GetAtt HostedZone.NameServers ]